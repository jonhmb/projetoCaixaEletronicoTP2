/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visão;

import SingletonPattern.Sessao;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;


/**
 *
 * @author Aluno
 */
public class TelaTransferencia extends javax.swing.JFrame {

    /**
     * Creates new form TelaDeposito
     */
    public TelaTransferencia() {
        initComponents();
        
         Sessao sessao = Sessao.getSessao(); 
        String nomeUsuario = sessao.getNome();
        Float saldoUsuario = sessao.getSaldo();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        botaoConfirmar = new javax.swing.JButton();
        botaoSair = new javax.swing.JButton();
        txtAgencia = new javax.swing.JTextField();
        txtValor = new javax.swing.JTextField();
        camposObrigatorios = new javax.swing.JLabel();
        txtConta = new javax.swing.JTextField();

        jLabel1.setText("Banco, agenca , conta , valor - depois qjue confirmar, vai validar com uma tela de confirmacao e dar OK");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Depósito");

        jLabel4.setText("Agência");

        jLabel5.setText("Conta");

        jLabel6.setText("Valor");

        botaoConfirmar.setText("Confirmar");
        botaoConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoConfirmarActionPerformed(evt);
            }
        });

        botaoSair.setText("Voltar");
        botaoSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSairActionPerformed(evt);
            }
        });

        txtAgencia.setEditable(false);
        txtAgencia.setText("1000");
        txtAgencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgenciaActionPerformed(evt);
            }
        });

        txtValor.setText("R$");

        camposObrigatorios.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAgencia))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtValor)
                            .addComponent(txtConta)))
                    .addComponent(camposObrigatorios, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(184, Short.MAX_VALUE)
                .addComponent(botaoConfirmar)
                .addGap(18, 18, 18)
                .addComponent(botaoSair)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(camposObrigatorios, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAgencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botaoConfirmar)
                    .addComponent(botaoSair))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSairActionPerformed
        TelaPrincipal tela = new TelaPrincipal(); 
        tela.setVisible(true);
        dispose();     // TODO add your handling code here:
    }//GEN-LAST:event_botaoSairActionPerformed

    private void txtAgenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgenciaActionPerformed
      

        
// TODO add your handling code here:
    }//GEN-LAST:event_txtAgenciaActionPerformed

    private void botaoConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoConfirmarActionPerformed
        int contador = 0;
      
        if (txtAgencia.getText().length() > 0) {
        txtAgencia.setVisible(true);
        contador++;
       
    } else {
      camposObrigatorios.setText("*Todos campos sao obrigatorios");
    }
        
        if (txtConta.getText().length() > 0) {
        txtConta.setVisible(true);
        contador++;
    } else {
      camposObrigatorios.setText("*Todos campos sao obrigatorios");
    }
        
        if (txtValor.getText().length() > 0) {
        txtValor.setVisible(true);
        contador++;
    } else {
      camposObrigatorios.setText("*Todos campos sao obrigatorios");
    }
        
        if (contador == 3){
         //BANCO DE DADOS
            Sessao sessao = Sessao.getSessao();
             try {
            
                      Class.forName("com.mysql.jdbc.Driver");
                       Connection con = null; 
                            PreparedStatement pstmt = null; 
                      
                      con = DriverManager.getConnection("jdbc:mysql://localhost:3306/dbcaixaeletronico", "root", "");
                      
                      Statement stm = con.createStatement(); 
                      
                      //Aqui fica a consulta
                      String sql = "select * from conta where nome = '"+sessao.getNome()+"'";
                      
                      //Aqui fica a execução da consulta
                      ResultSet rs = stm.executeQuery(sql);
                      
     
                      //Esse NEXT quer dizer que a consulta é verdadeira, então se houver um NEXT, dá para entrar    
                      if (rs.next()) {
                          
                          //(1) Aqui iremos mexer com o saldo do usuário que está fazendo depósito
                          Float saldoAtualUsuario = Float.valueOf(rs.getString("saldo"));
                          Float saldoDigitado = Float.valueOf(txtValor.getText());
                          
                          Float calculoSaldoAtual = saldoAtualUsuario - saldoDigitado; 
                  
                          if (calculoSaldoAtual >= 0) {  
                         //Essa sessão atualiza o saldo do Usuario ao clicar no botao, fazendo ele perder o dinheiro que transferiu
                          PreparedStatement pUsuario = con.prepareStatement("UPDATE conta SET saldo = ? WHERE id_conta = ?");   
                          pUsuario.setFloat(1, calculoSaldoAtual);
                          pUsuario.setInt(2, sessao.getId());
                          pUsuario.execute();
                          pUsuario.close();
                          
                          PreparedStatement pRegistroTransferencia = con.prepareStatement("INSERT INTO transferencia (valor, id_contaFK) values (?, ?)");
                          pRegistroTransferencia.setFloat(1, saldoDigitado);
                          pRegistroTransferencia.setInt(2, sessao.getId());
                          pRegistroTransferencia.execute();
                          pRegistroTransferencia.close();
                                 
                          
                          //(2) Aqui iremos mexer com o saldo do usuário que está recebendo o depósito
                          //Criamos um novo Statement e um novo ResultText para dar SELECT * FROM
                          Statement stmRecebimento = con.createStatement();
                          String sqlRecebimento = "select * from conta where login = '"+txtConta.getText()+"'";
                          ResultSet rsRecebimento = stmRecebimento.executeQuery(sqlRecebimento);
                          
                          if (rsRecebimento.next()) {  
                          //Continha básica para pegar o que foi digitado e somar com o saldo atual do rapaz
                          Float saldoAtualRecebimento = Float.valueOf(rsRecebimento.getString("saldo"));                    
                          Float calculoSaldoRecebido = saldoAtualRecebimento + saldoDigitado;
                          
                          //Criamos um PreparedStatement para atualizar o saldo atual da conta recebimento
                          PreparedStatement pRecebimento = con.prepareStatement("UPDATE conta SET saldo = ? WHERE login = ?");
                          pRecebimento.setFloat(1, calculoSaldoRecebido);
                          pRecebimento.setInt(2, Integer.valueOf(txtConta.getText()));
                          pRecebimento.execute();
                          pRecebimento.close();
                          
                          JOptionPane.showMessageDialog(null, "Transferência realizada!");
                          
                          //Aqui atualiza o saldo na Singleton, para que seja atualizado na TelaPrincipal também
                          sessao.setSaldo(calculoSaldoAtual);
                          
                          TelaPrincipal tela = new TelaPrincipal(); 
                          tela.setVisible(true);
                          dispose(); 
                          
                          }
                          
                          } else 
                              JOptionPane.showMessageDialog(null, "Saldo insuficiente");
                          

     
                      } else {
                      JOptionPane.showMessageDialog(null, "Depósito impossível");                       
                      }

                  } 
                  catch (ClassNotFoundException | SQLException | HeadlessException e) {
                      JOptionPane.showConfirmDialog(null, e);
                  }
            
            
            
        }
        else {
             camposObrigatorios.setText("*Todos campos sao obrigatorios");
            }
        
        //BANCO DE DADOS
        
        
    }//GEN-LAST:event_botaoConfirmarActionPerformed

    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaTransferencia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoConfirmar;
    private javax.swing.JButton botaoSair;
    private javax.swing.JLabel camposObrigatorios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtAgencia;
    private javax.swing.JTextField txtConta;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
